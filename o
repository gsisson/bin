#!/usr/bin/env bash

# This script is symlinked and can be entered as 'o' or 'g':
#   ~/usr/bin/o
#   ~/usr/bin/g
#
# It provides command completion when used in conjuction
#   with ~/usr/completion/[og]
#
# Pass an argument and when runs as
#   'o' it will 'open' the passed argument (a folder or supported program name)
#   'g' will output a 'cd' command for passed arguement (must be a folder)
#       Note: if 'g' gets a non-directory target it will just open it as though called with 'o'
#
# - If no argument is passed in, the clipboard is used as the argument

#
# the function that does the actual work
#
handle_it() {
  cmd=$(basename $0)
  if [ "${CYGWIN}" = "" ]; then
    local clipboard=$( pbpaste )
  else
    local clipboard=$( getclip|d2u )
  fi
  # handle arguments 
  if [ "${1#shell}" != "$@" -o "${1#Microsoft}" != "$@"  ]; then
    # not handling a directory, but a 'shell:' type, or 'Microsoft' type
    if [ "$cmd" = 'g' ]; then
      echo "cannot 'g' to '$@'"     1>&2
      echo "running 'o' instead..." 1>&2
      cmd='o'
      # caller of 'g' is expecting some text to be returned, so echo back a blank line
      echo
    fi
    case "$1" in
      shell*)     echo + explorer "$@" 1>&2
                         explorer "$@"
                  ;;
      Microsoft*) echo + control /name "$@" 1>&2
                         control /name "$@"
                  ;;
    esac
    return
  fi
  # handling a directory directories
  if [ -z "$*" ]; then
    # no argument passed, so maybe a directory is on the clipboard
    #clipboard=$( getclip|d2u )
    if [ -d "$clipboard" ]; then
      set -- "$clipboard"
    else
      # let the user know we looked for a dir on the clipboard
      echo "# clipboard does not hold a directory" 1>&2
    fi
  fi
  if [ -z "$*" ]; then
    # if no directory was passed, nor on the clipboard, that is a usage error
    echo "usage $cmd <directory>" 1>&2
    exit 1
  fi
  if [ ! -d "$*" ]; then
    # if the argument passed was not a directoy, that is an error
    echo "ERROR: Directory does not exist: '$@'" 1>&2
    exit 1
  fi
  # now we have a real directory to work with
  case "$cmd" in
    o) # filter this line out when run with '-?'
       # the dir comes in as a cygwin dir, but to open it, we need a windows dir 
       if [ "${CYGWIN}" = "" ]; then
         echo + open $windir $@ 1>&2
         open $windir $@
       else
         windir=$(echo "$*" | sed -e 's|/cygdrive/\(.\)/|\1:/|' -e 's:/:\\:g' ) 
         echo + explorer $windir 1>&2
         explorer $windir
       fi
       ;;
    g) echo "cd '$*'";; # filter this line out when run with '-?'
  esac
}

# - Here we translate supported 'shorthand' arguements for real directories or programs
#   that are hard to remember
# - Add more entries to the 'case' to handle new shorthands
# - Any argument that isn't a shorthand is handed by the final '*' case (specific directories
#   or something passed in on the clipboard

desktop_pictures_locn="c:/Users/gsisson/AppData/Local/Packages/Microsoft.Windows."
desktop_pictures_locn="${desktop_pictures_locn}ContentDeliveryManager_cw5n1h2txyewy/LocalState/Assets"

case "$@" in
  # '-?' provides help by returning a list of supported shorthands.
  # This argument is used by ~/usr/completion/[og] to get command completion for shortcuts
  -?)               cat $0 | grep -v '#' | grep '[a-z])' | sed -e 's:).*::' -e 's:^  ::' | column;;
  # executable shorthands that can be 'opened'
  blinds)           "C:/Program Files (x86)/Stardock/WindowBlinds/WB10Config.exe" "$@" &;;
  photoshop)        shift; $HOME/usr/bin/adobe "$@";;
  premiere.pro)     shift; $HOME/usr/bin/pp    "$@";;
  firefox)          cmd /c "C:/Program Files/Mozilla Firefox/firefox.exe";;
  screensaver)      control "desk.cpl,,@screensaver";;
  bitlocker)        handle_it Microsoft.BitLockerDriveEncryption;;
  # folder shorthands that can be 'opened'
  completion)       handle_it "$HOME/usr/completion/";;
  auto_hot_key)     handle_it "$HOME/usr/bin/config/";;
  cloud)            if [ "${CYGWIN}" = "" ]; then
                      handle_it "$HOME/Dropbox/"
                    else
                      handle_it "$HOME/Documents/Cloud"
                    fi;;
  data)             handle_it "$HOME/Documents/HOME/DATA";;
  dropbox)          handle_it "$HOME/Documents/Cloud/Dropbox";;
  downloads)        handle_it "$HOME/Downloads";;
  home)             handle_it "$HOME";;
  links)            handle_it "$HOME/usr/bin0/pc/lnk/";;
  movies)           handle_it "C:/_MOVIES_C/";;
  photos)           handle_it "P:/";;
  room)             handle_it $HOME/Documents/HOME/Real\ Estate/2005*/Room.For.Rent;;
  rotate)           handle_it "p:/My_Pictures_ToRotate";;
  scan)             handle_it "p:/My_Pictures_Scan_In";;
  sysinternals)     handle_it "$HOME/usr/bin0/pc/SysInternals/";;
  video)            handle_it "V:/";;
  video.marker)     handle_it $HOME/usr/bin0/video.marker/;;
  # places (executables that are kind of like folders)
  diskmgmt)         cmd /c "C:/Windows/System32/diskmgmt.msc";;
  computer)         handle_it "shell:MyComputerFolder";;
  control.panel)    handle_it "shell:ControlPanelFolder";;
  desktop)          handle_it "shell:Desktop";;
  desktop.common)   handle_it "shell:Common Desktop";;
  #desktop.folder)  handle_it "shell:ThisPCDesktopFolder";;
  documents)        handle_it "shell:Documents";;
  #documents.local) handle_it "shell:Local Documents";; #same place as 'documents' actually
  documents.common) handle_it "shell:Common Documents";;
  libraries)        handle_it "shell:Libraries";;
  music)            handle_it "shell:My Music";;
  photos.pc)        handle_it "shell:My Pictures";;
  pictures)         handle_it "shell:My Pictures";;
  pictures.desktop) handle_it "$desktop_pictures_locn";;
  pinned)           handle_it "shell:User Pinned";;
  playlists)        handle_it "shell:Playlists";;
  printers)         handle_it "shell:PrintersFolder";;
  quick.launch)     handle_it "shell:Quick Launch";;
  recycle)          handle_it "shell:RecycleBinFolder";;
  screenshots)      handle_it "shell:ScreenShots";;
  sendto)           handle_it "shell:SendTo";;
  startmenu)        handle_it "shell:Start Menu";;
  startmenu.common) handle_it "shell:Common Start Menu";;
  startup)          handle_it "shell:Startup";;
  startup.common)   handle_it "shell:Common Startup";;
  # web pages
  tix)              cmd /c "start https://tpb.cool/";;
                                         #tpb.cool
                                         #piratebay.icu
                                         #thepiratebay.icu
                                         #proxybay.live
                                         #pirateproxy.wtf
                                         #piratebay.life
                                         #thepiratebay.fail
                                         #thepiratebay.fyi
                                         #piratebay.tech
                                         #thepirate.live
                                         #thepirate.fun
                                         #thepirate.host
                                         #thepiratebay.org/search/The%20Fourth%20Estate/0/99/0
  tix2)             cmd /c "start https://zooqle.com/search?q=the+clinton+affair";;
  *)                handle_it "$*";;
esac
