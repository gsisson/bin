#!/usr/bin/env bash
. ~/.bashrc.functions.pc

# This script is symlinked and can be entered as 'o' or 'g':
#   ~/usr/bin/o
#   ~/usr/bin/g
#
# It provides command completion when used in conjuction
#   with ~/usr/bin/functions/completion/[og]
#
# Pass an argument and when runs as
#   'o' it will 'open' the passed argument (a folder or supported program name)
#   'g' will output a 'cd' command for passed arguement (must be a folder)
#       Note: if 'g' gets a non-directory target it will just open it as though called with 'o'
#
# - If no argument is passed in, the clipboard is used as the argument
#
# - when maintaining, add "filter this line out" to any lines that match the grep
#   down on the '-?)' line.  Usually that is any line matching '[a-z0-9])'

if [ "${CYGWIN}" != "" ]; then
  open() {
    case "$1" in
      http*) cmd /c start "${@}";;
      *)     start "$@";;
    esac
  }
fi

handle_it() {
  cmd=$(basename $0) # filter this line out when run with '-?' (matches on "0)")
  if [ "${CYGWIN}" = "" ]; then
    local clipboard=$( pbpaste )
  else
    local clipboard=$( getclip|d2u )
  fi
  # handle arguments 
  if [ "${1#shell}" != "$@" -o "${1#Microsoft}" != "$@"  ]; then
    # not handling a directory, but a 'shell:' type, or 'Microsoft' type
    if [ "$cmd" = 'g' ]; then
      echo "cannot 'g' to '$@'"     1>&2
      echo "running 'o' instead..." 1>&2
      cmd='o'
      # caller of 'g' is expecting some text to be returned, so echo back a blank line
      echo
    fi
    case "$1" in
      shell*)     echo + explorer "$@" 1>&2
                         explorer "$@"
                  ;;
      Microsoft*) echo + control /name "$@" 1>&2
                         control /name "$@"
                  ;;
    esac
    return
  fi
  # handling a directory directories
  if [ -z "$*" ]; then
    # no argument passed, so maybe a directory is on the clipboard
    #clipboard=$( getclip|d2u )
    if [ -d "$clipboard" ]; then
      set -- "$clipboard"
    else
      # let the user know we looked for a dir on the clipboard
      echo "# clipboard does not hold a directory" 1>&2
    fi
  fi
  if [ -z "$*" ]; then
    # if no directory was passed, nor on the clipboard, that is a usage error
    echo "usage $cmd <directory>" 1>&2
    exit 1
  fi
  if [ ! -d "$*" ]; then
    # if the argument passed was not a directoy, that is an error
    echo "ERROR: Directory does not exist: '$@'" 1>&2
    exit 1
  fi
  # now we have a real directory to work with
  case "$cmd" in
    o) # filter this line out when run with '-?' (matches on "o)")
       # the dir comes in as a cygwin dir, but to open it, we need a windows dir 
       if [ "${CYGWIN}" = "" ]; then
         echo + open $windir "$@" 1>&2
         open $windir "$@"
       else
         windir=$(echo "$*" | sed -e 's|/cygdrive/\(.\)/|\1:/|' -e 's:/:\\:g' ) 
         echo + explorer $windir 1>&2
         explorer $windir
       fi
       ;;
    g) echo "cd '$*'";; # filter this line out when run with '-?' (matches on "g)")
  esac
}

# - Here we translate supported 'shorthand' arguements for real directories or programs
#   that are hard to remember
# - Add more entries to the 'case' to handle new shorthands
# - Any argument that isn't a shorthand is handed by the final '*' case (specific directories
#   or something passed in on the clipboard

tlz_docs_isengard="https://tiny.amazon.com/150r5a9wl"
desktop_pictures_locn="$HOME/AppData/Local/Packages/Microsoft.Windows."
desktop_pictures_locn="${desktop_pictures_locn}ContentDeliveryManager_cw5n1h2txyewy/LocalState/Assets"

case "$@" in
  # '-?' provides help by returning a list of supported shorthands.
  # This argument is used by ~/usr/completion/[og] to get command completion for shortcuts
  -?) cat $0 | grep -v 'filter this line out' |
      grep -v '^ *#' | grep '[a-zA-Z0-9])' |
      sed -e 's:).*::' -e 's:^  ::' | column;;
  e)                   edit "$0";; # filter this line out when run with '-?' (avoid clutter)
  # executable shorthands that can be 'opened'
  blinds)              "C:/Program Files (x86)/Stardock/WindowBlinds/WB10Config.exe" "$@" &;;
  photoshop)           shift; $HOME/usr/bin/adobe "$@";;
  premiere.pro)        shift; $HOME/usr/bin/pp    "$@";;
  firefox)             if [ "${CYGWIN}" = "" ]; then
                         echo "fix $0 for mac"
                       else
                         cmd /c "C:/Program Files/Mozilla Firefox/firefox.exe"
                       fi;;
  screensaver)         control "desk.cpl,,@screensaver";;
  bitlocker)           handle_it Microsoft.BitLockerDriveEncryption;;
  #                    alternative: manage-bde -unlock t: -password # must be admin!
  controller)          handle_it "shell:::{A8A91A66-3A7D-4424-8D24-04E180695C7A}";;
  browser)             open "$HOME/usr/src/DotNet/c#/Browser/Browser.csproj";;
  # folder shorthands that can be 'opened'
  anki)                open "$HOME/Library/Application Support/Anki2/";;
  browser)             open "$HOME/usr/src/DotNet/c#/Browser/";;
  completion)          open "$HOME/usr/completion/";;
  auto_hot_key)        open "$HOME/usr/bin/config/";;
  cloud)               if [ "${CYGWIN}" = "" ]; then
                         open "$HOME/Dropbox/"
                       else
                         open "$HOME/Documents/Cloud"
                       fi;;
  data)                open "$HOME/Documents/HOME/DATA";;
  dropbox)             if [ "${CYGWIN}" = "" ]; then
                         open "$HOME/Documents/Cloud/Dropbox"
                       else
                         open "$HOME/Dropbox/"
                       fi;;
  downloads)           open "$HOME/Downloads";;
  home)                open "$HOME";;
  links)               open "$HOME/usr/bin0/pc/lnk/";;
  movies)              open "C:/_MOVIES_C/";;
  photos)              if [ "${CYGWIN}" = "" ]; then
                         echo "fix $0 for mac"
                       else
                         open "$HOME/Pictures/" # open "shell:Pictures"
                       fi;;
  room)                open $HOME/Documents/HOME/*stat*/*05*/*en*;;
  rotate)              open "P:/Photos/My_Pictures_ToRotate";;
  scan)                open "P:/Photos/My_Pictures_Scan_In";;
  sysinternals)        open "$HOME/usr/bin0/pc/SysInternals/";;
  video)               open "P:/Videos/";;
  video.marker)        efile "$HOME/usr/local/video.marker/index.html";;
  # places (executabl  es that are kind of like folders)
  diskmgmt)            open "C:/Windows/System32/diskmgmt.msc";;
  computer)            handle_it "shell:MyComputerFolder";;
  control.panel)       handle_it "shell:ControlPanelFolder";;
  desktop)             open "$HOME/Desktop/";;
  desktop.common)      handle_it "shell:Common Desktop";;
  documents)           handle_it "shell:Documents";;
  #documents.local)    handle_it "shell:Local Documents";; #same place as 'documents' actually
  documents.common)    handle_it "shell:Common Documents";;
  libraries)           handle_it "shell:Libraries";;
  music)               handle_it "shell:My Music";;
  music.backup)        handle_it "T:/___Mac.Music_BACKUP";;
  music.to.get)        handle_it "P:/Photos/My_Pictures_ToRotate/_MUSIC_TO_GET";;
  photos.pc)           handle_it "shell:My Pictures";;
  pictures)            open "$HOME/Pictures/";;
  pictures.desktop)    open "$desktop_pictures_locn";;
  pinned)              handle_it "shell:User Pinned";;
  playlists)           handle_it "shell:Playlists";;
  printers)            handle_it "shell:PrintersFolder";;
  quick.launch)        handle_it "shell:Quick Launch";;
  recycle)             if [ "${CYGWIN}" = "" ]; then
                         open "$HOME/Recycle"
                       else
                         handle_it "shell:RecycleBinFolder"
                       fi;;
  screenshots)         if [ "${CYGWIN}" = "" ]; then
                         open "$HOME/Desktop/Screenshots"
                       else
                         handle_it "shell:ScreenShots"
                       fi;;
  sendto)              handle_it "shell:SendTo";;
  startmenu)           handle_it "shell:Start Menu";;
  startmenu.common)    handle_it "shell:Common Start Menu";;
  startup)             handle_it "shell:Startup";;
  startup.common)      handle_it "shell:Common Startup";;
  # web pages
  tix1)                open "https://bit.ly/3d7sBPj";;
  tix2)                open "https://bit.ly/2SqFD0u";;
  sso0)                open 'https://tiny.amazon.com/135smat4n';;
  sso1)                open 'https://tiny.amazon.com/130r5i4sm';;
  sso9)                open 'https://tiny.amazon.com/vn3ywec7';;  # 9d1
  sso-tlz-docs)        open "${tlz_docs_isengard}";;
  tiny)                open 'http://tiny.amazon.com/';;
  isengard)            open 'https://tiny.amazon.com/r91blny0';;
#  tlz)                 case ${@} in
#                         docs);;
#                       esac;;
  tlz-docs)            open 'https://tlz-product-docs-dev.tlzdemo.net/';;
  tlz-docs-isengard)   open ${tlz_docs_isengard};;
  tlz-docs-code-build) open 'https://tiny.amazon.com/1h1qdeb8q';;
  tlz-docs-github)     open 'https://github.com/tlzproject/tlz-product-docs';;
  tlz-OLD-workshop)    open 'https://tlz-workshop.tlzdemo.net/';;
  sage)                open 'https://sage.amazon.com/search?q=what+is+sage';;
  *)                   handle_it "$*";;
esac
