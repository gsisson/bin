#!/usr/bin/env bash

# This script is symlinked and can be entered as 'o' or 'g':
#   ~/usr/bin/o
#   ~/usr/bin/g
#
# It provides command completion when used in conjuction
#   with ~/usr/bin/functions/completion/[og]
#
# Pass an argument and when runs as
#   'o' it will 'open' the passed argument (a folder or supported program name)
#   'g' will output a 'cd' command for passed arguement (must be a folder)
#       Note: if 'g' gets a non-directory target it will just open it as though called with 'o'
#
# - If no argument is passed in, the clipboard is used as the argument
#
# - when maintaining, add "filter this line out" to any lines that match the grep
#   down on the '-?)' line.  Usually that is any line matching '[a-z0-9])'

handle_it() {
  cmd=$(basename $0) # filter this line out when run with '-?' (matches on "0)")
  if [ "${CYGWIN}" = "" ]; then
    local clipboard=$( pbpaste )
  else
    local clipboard=$( getclip|d2u )
  fi
  # handle arguments 
  if [ "${1#shell}" != "$@" -o "${1#Microsoft}" != "$@"  ]; then
    # not handling a directory, but a 'shell:' type, or 'Microsoft' type
    if [ "$cmd" = 'g' ]; then
      echo "cannot 'g' to '$@'"     1>&2
      echo "running 'o' instead..." 1>&2
      cmd='o'
      # caller of 'g' is expecting some text to be returned, so echo back a blank line
      echo
    fi
    case "$1" in
      shell*)     echo + explorer "$@" 1>&2
                         explorer "$@"
                  ;;
      Microsoft*) echo + control /name "$@" 1>&2
                         control /name "$@"
                  ;;
    esac
    return
  fi
  # handling a directory directories
  if [ -z "$*" ]; then
    # no argument passed, so maybe a directory is on the clipboard
    #clipboard=$( getclip|d2u )
    if [ -d "$clipboard" ]; then
      set -- "$clipboard"
    else
      # let the user know we looked for a dir on the clipboard
      echo "# clipboard does not hold a directory" 1>&2
    fi
  fi
  if [ -z "$*" ]; then
    # if no directory was passed, nor on the clipboard, that is a usage error
    echo "usage $cmd <directory>" 1>&2
    exit 1
  fi
  if [ ! -d "$*" ]; then
    # if the argument passed was not a directoy, that is an error
    echo "ERROR: Directory does not exist: '$@'" 1>&2
    exit 1
  fi
  # now we have a real directory to work with
  case "$cmd" in
    o) # filter this line out when run with '-?' (matches on "o)")

       # the dir comes in as a cygwin dir, but to open it, we need a windows dir 
       if [ "${CYGWIN}" = "" ]; then
         echo + open $windir "$@" 1>&2
         open $windir "$@"
       else
         windir=$(echo "$*" | sed -e 's|/cygdrive/\(.\)/|\1:/|' -e 's:/:\\:g' ) 
         echo + explorer $windir 1>&2
         explorer $windir
       fi
       ;;
    g) echo "cd '$*'";; # filter this line out when run with '-?' (matches on "g)")
  esac
}

# - Here we translate supported 'shorthand' arguements for real directories or programs
#   that are hard to remember
# - Add more entries to the 'case' to handle new shorthands
# - Any argument that isn't a shorthand is handed by the final '*' case (specific directories
#   or something passed in on the clipboard

tlz_docs_isengard="https://tiny.amazon.com/150r5a9wl"

case "$@" in
  # '-?' provides help by returning a list of supported shorthands.
  # This argument is used by ~/usr/completion/[og] to get command completion for shortcuts
  -?)               cat $0 | grep -v 'filter this line out' | grep -v '^ *#' | grep '[a-z0-9])' | sed -e 's:).*::';;
  # executable shorthands that can be 'opened'
  #
  # folder shorthands that can be 'opened'
  cloud)            handle_it "$HOME/Dropbox/";;
  dropbox)          handle_it "$HOME/Dropbox/";;
  downloads)        handle_it "$HOME/Downloads";;
  home)             handle_it "$HOME";;
  photos)           handle_it "$HOME/Pictures/";;
  pictures)         handle_it "$HOME/Pictures/";;
  desktop)          handle_it "$HOME/Desktop/";;
  # places (executables that are kind of like folders)
  #
  #documents.local) handle_it "shell:Local Documents";; #same place as 'documents' actually
  recycle)          handle_it "$HOME/Recycle";;
  screenshots)      handle_it "$HOME/Desktop/Screenshots";;
  # web pages
  sso-tlz5)            open 'https://tiny.amazon.com/17amv9n73';; # 719  never shows up as tab arg!
  sso-tlz7)            open 'https://tiny.amazon.com/m866sf8b';;  # 4ff  never shows up as tab arg!
  sso-tlz8)            open 'https://tiny.amazon.com/13t7mm6l0';; # d67  never shows up as tab arg!
  sso-tlz9)            open 'https://tiny.amazon.com/vn3ywec7';;  # 9d1
  sso-tlz-docs)        open "${tlz_docs_isengard}";;
  tiny)                open 'http://tiny.amazon.com/';;
  isengard)            open 'https://tiny.amazon.com/r91blny0';;
#  tlz)                 case ${@} in
#                         docs);;
#                       esac;;
  tlz-docs)            open 'https://tlz-product-docs-dev.tlzdemo.net/';;
 #tlz-docs-isengard)   open 'https://d-906709f405.awsapps.com/start';;
  tlz-docs-isengard)   open ${tlz_docs_isengard};;
  tlz-docs-code-build) open 'https://tiny.amazon.com/1h1qdeb8q';;
  tlz-docs-github)     open 'https://github.com/tlzproject/tlz-product-docs';;
  tlz-OLD-workshop)    open 'https://tlz-workshop.tlzdemo.net/';;
  sage)                open 'https://sage.amazon.com/search?q=what+is+sage';;
  *)                   handle_it "$*";;
esac
