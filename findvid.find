#!/usr/bin/env ruby

require '~/usr/ruby/lib/dir2.rb'
require '~/usr/ruby/lib/file_symlink'
require '~/usr/ruby/lib/filesystem'
require '~/usr/ruby/lib/check_for_non_links'
require 'clipboard' #gem install clipboard

DIR ='t:/RECYCLABLE/v/'

#video_extentions = /lnk$|mp3$|jpg$|jpeg$|txt$|xmp$|png$|sh$|proj$|gif$|url$|tif$|rb$|THM$|AAE$|psd$/i
 video_extentions = /f4v$|webm$|m2v$|m2t$|flv$|mts$|m4v$|avi$|3gp$|wmv$|mov$|mp4$|mpg$|mpeg$|mkv$/i

def usage(args = nil)
  name = File.basename(__FILE__)
  STDERR.puts("\n#{args}\n\n") if args != nil
  STDERR.puts "usage: #{name} ...TBD..."
  exit 1
end

if ! Dir.exist?(DIR)
  STDERR.puts "Directory DNE! #{DIR}"
  exit 1
end

def check_quick_swim()
  the = "#{DIR}_QUICK/==GEN/SWIM.IN.OUT"
  if ! Dir.exist?(the)
    the = "#{DIR}_QUICK/==GEN/_SWIM.IN.OUT"
    if ! Dir.exist?(the)
      STDERR.puts "Directory DNE! #{the}"
      exit 1
    end
  end
  Dir.chdir the do
    # check 1
    items = Dir2.glob_i('**/*')
    items.select! do |item|
      item !~ /\/BesT\.lnk$|\/good\.lnk$|\/=too-....\.lnk$|\/_\.lnk$/
    end
    items.select! do |item|
      ! Dir.exist?(item) && item =~ /\.lnk$/ && item !~ /swimsuit/
    end
    if items.size > 0
      STDERR.puts
      STDERR.puts "ERROR!!"
      STDERR.puts "Found non-'swimsuit' under '#{the}':"
      STDERR.puts
      items.each do |item|
        STDERR.puts "#{the}/#{item}"
      end
      STDERR.puts
      exit 1
    end
    # check 2
    items = Dir2.glob_i('**/*')
    items.select! do |item|
      item !~ /\/BesT\.lnk$|\/good\.lnk$|\/=too-....\.lnk$|\/_\.lnk$/
    end
    items.select! do |item|
      ! Dir.exist?(item)   &&
        item =~ /\.lnk$/   &&
        item =~ /swimout/  &&
        item !~ /outdoors/
    end
    if items.size > 0
      STDERR.puts
      STDERR.puts "ERROR!!"
      STDERR.puts "Found non-'outdoors' under 'swimout' (#{the}):"
      STDERR.puts
      items.each do |item|
        STDERR.puts "#{the}/#{item}"
      end
      STDERR.puts
      exit 1
    end
    # check 3
    items = Dir2.glob_i('**/*')
    items.select! do |item|
      item !~ /\/BesT\.lnk$|\/good\.lnk$|\/=too-....\.lnk$|\/_\.lnk$/
    end
    items.select! do |item|
      ! Dir.exist?(item) && item =~ /\.lnk$/ && item =~ /outside/
    end
    if items.size > 0
      STDERR.puts
      STDERR.puts "ERROR!!"
      STDERR.puts "Found 'outside' under 'swimout' (#{the}):"
      STDERR.puts
      items.each do |item|
        STDERR.puts "#{the}/#{item}"
      end
      STDERR.puts
      exit 1
    end
  end
end

def check_word(wrong,correct,opt=nil)
  the = "#{DIR}"
  if ! Dir.exist?(the)
    STDERR.puts "Directory DNE! #{the}"
    exit 1
  end
  wrong   = wrong.reverse   if opt == 'r'
  correct = correct.reverse if opt == 'r'
  Dir.chdir the do
    items = Dir2.glob_i('**/*')
    items.select! do |item|
      # not a directory, and not an allowed file
      item =~ %r{#{wrong}}
    end
    if items.size > 0
      STDERR.puts
      STDERR.puts "SHORTCUT ERROR!!"
      STDERR.puts "Found '#{wrong}' files under #{the}:"
      STDERR.puts "(should be using '#{correct}')"
      STDERR.puts
      items.each do |item|
        STDERR.puts "#{the}#{item}"
      end
      STDERR.puts
      STDERR.puts "SHORTCUT ERROR!!"
      STDERR.puts "Found '#{wrong}' files under #{the}:"
      STDERR.puts "(should be using '#{correct}')"
      STDERR.puts
      exit 1
    end
  end
end

check_for_nonlinks(DIR, /\.lnk$|\.jpg$|\.txt$|\.sh$|desktop\.ini$|\.prproj/)
check_quick_swim
check_word("housecleaning","housework")
check_word("outside","outdoors")
check_word("tempcheck","checkTemp")
check_word("tempCheck","checkTemp")
check_word("temp.check","checkTemp")
check_word("check.temp","checkTemp")
check_word("gniknaps","knaps",'r')
check_word("suna","lana",'r')

if ARGV.size != 0
  items = ARGV
else
  #items = Dir2.glob_i('*.lnk')
  Dir.chdir DIR do
    items = Dir2.glob_i('**/*.lnk')
  end
end

#puts "=========================="
#print "searching for: "
#items.each { |i| STDERR.print "#{i} " }
#puts
#puts "=========================="
curdir=Dir2.pwd

Dir.chdir DIR
vids = Dir2.all_files_recursively()
vids.select! {|i| ! Dir.exist?(i)}
vids.select! {|i| i =~ video_extentions } # reject files of types not interested in
vids.map! {|i|"#{DIR}#{i}"}
FS.verify_no_dup_files_across_dirs(vids)
# puts "#{vids.length}"

#puts "-----------------"
#puts "#{vids.length}"
#puts vids
#puts "-----------------"

probs=[]
items.each do |item|
  if item =~ / \([0-9]\).lnk$/ || item =~ / - Copy.lnk$/
    probs << item
  end
end
if probs.size > 0
  STDERR.puts
  STDERR.puts "found problem lnk files ending with /[0-9].lnk#/ or / - Copy.lnk$/:"
  STDERR.puts
  probs.each do |prob|
    STDERR.puts "#{DIR}/#{prob}"
  end
  STDERR.puts
  exit 1
end


STDERR.puts "lnk files not matching targets:"
items.each do |item|
  item_f=File.basename(item).sub(/.lnk$/,'')
  next if item_f !~ video_extentions
  if item_f =~ /^_[0-9][0-9][0-9][0-9][0-9]_/
    #puts "MATCH2: #{item_f}"
    item_f =~ /\/_[0-9][0-9][0-9][0-9][0-9]_/
    item_f = item_f[7..]
  end
  if vids.any?{ |s| s[item_f] }
    found=true
  else
    puts "#{DIR}#{item}"
  end
end
