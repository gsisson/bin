#!/usr/bin/env bash
. ~/.bashrc

usage() {
  if [ -n "$@" ]; then
    echo >&2 "$@" 
  fi
  echo >&2 "usage: $(basename $0) [NUMBER|-] [+]..]"
  echo >&2 "   ex  $(basename $0)             # find a new unique number"
  echo >&2 "   ex  $(basename $0) -           # searches for number from clipboard"
  echo >&2 "   ex  $(basename $0) - +         # searches for number from clipboard, and successor"
  echo >&2 "   ex  $(basename $0) - +++       # searches for number from clipboard, and successors"
  echo >&2 "   ex  $(basename $0) '#023672#'  # searches for the number"
  echo >&2 "   ex  $(basename $0)   023672    # searches for the number"
  echo >&2 "   ex  $(basename $0)   023672 ++ # searches for the number, and successors"
  exit 1
}

cleann() {
  # examples that return '665572'
  #cleann '#665572#some.name.mp4'
  #cleann '#665572#'
  #cleann '#665572'
  #cleann '#####665572'
  #cleann '665572'
  #cleann '_5_#048585#abcd.txt'
  #echo >&2 '->'$1'<-'
  echo >&2 :$1:
  case "$1" in
    *#*#*) n=`echo "$1" | sed -e 's/#FAV#/#/' -e 's/#[0-9][0-9][0-9]bpm#/#/' -e 's/^[^#]*//' -e 's/[^#]*$//' -e 's/^#*//' -e 's/#*$//'`
           # echo >&2 n:$n:
           case "$n" in
             [0-9][0-9][0-9][0-9][0-9][0-9]) true ;;
             *) usage "ERROR: '$n' is not a 6 digit number";;
           esac
           ;;
    [0-9][0-9][0-9][0-9][0-9][0-9]) ;;
    *)     usage "ERROR: '$1' is not in correct format";;
  esac
  #echo >&2  '->'$n'<-'
  echo "$n"
}

valid_pluses() {
  #echo -n "--$1-- "
  [[ $1 =~ ^[+]+$ ]]
}

valid_number() {
  # echo -n "--$1-- "
  [[ $1 =~ ^#?[0-9]+#?.*$ ]]
}

n=""
if [ "$#" -gt 0 ]; then
  n="$1" ; shift
  if [ "$n" = '-' ]; then
    n=`p`
  fi
  n="$(basename $n)"
  n=`cleann "$n"`
  if [ -z "$n" ]; then
    exit 1
  fi
else
 # find a unique ID
 cd t:/Premiere.Pro.Work || o bitlocker || exit 1
 \ls ./\#* > find 2>/dev/null
 cd t:/recyclable/v      || o bitlocker || exit 1
 find . -type f > find.txt
  while true; do
    set -- $(r)
    cat find.txt t:/Premiere.Pro.Work/find | grep -i "$1" > /dev/null 2>&1
    if [ $? != 0 ]; then
      ruby -e "print '$1'"
      ruby -e "print '$1'" | c
      break
    fi
  done
  exit 0
fi

if [ "$#" -gt 1 ]; then
  usage "wrong number of arguments"
fi
if [ "$#" = 1 ]; then
  if ! valid_pluses "$1"; then
    usage "not a series of pluses: '$1'"
  fi
fi

echo + findvid $n
       findvid $n

while : ; do
  if ! valid_pluses "$1"; then
    exit 0
  fi
  let "n=$((10#$n+1))"  
  n=`printf "%06d" $n` # pad with leading zeros, as necessary
  echo + findvid $n
         findvid $n
  set -- ${1#?}
done
