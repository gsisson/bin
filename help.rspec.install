#!/usr/bin/env ruby

require 'colorize'

def show(line)
  lines=line.strip.split("\n")
  puts "#{lines[0].cyan}" if lines[0]
  lines[1..-1].each do |line|
    puts "#{line.yellow.bold}"
  end
end

show(%q{
== Setup Steps for RSpec when NOT using Rails =========
gem install rspec
gem update rspec
rbenv rehash
rspec --version
rspec --help
rspec --init # create .rspec spec/spec_helper.rb
})

show(%q{
== Setup Steps for RSpec when using Rails =============
})

show(%q{
== Setup Spring, Rspec and Guard ======================
(from: http://girders.org/blog/2014/02/06/setup-rails-41-spring-rspec-and-guard/)
})

show(%q{
== Avoid Test::Unit ===================================
# when generating rails app
app=TestApp
rails new $app -T # -T skips Test::Unit
})

show(%q{
== Add Rspec, Guard, Spring, Capybara to Gemfile ======
cd $app

# kill any spring process running for this app (left over from false starts)
if [ "$(ps -ef | grep -v grep | grep 'spring .* | * '"${app}"' |')" != "" ]; then
  spring stop
fi

cat >> Gemfile << EOF
group :development, :test do
  gem 'rspec-rails', '~> 3.0'
end

#allow using 'guard' to run rspec fast
group :development do
  gem 'guard-rspec'
  gem 'spring-commands-rspec', group: :development
# gem 'rb-fsevent' if `uname` =~ /Darwin/
end

gem 'capybara', group: :test
EOF
bundle
})

show(%q{
== Initialize =========================================
rails generate rspec:install # this will start spring background process
# if that rails command hangs, run "spring stop", then try again
RAILS_ENV=test rake db:create db:migrate db:setup
bundle exec spring binstub rspec

guard init
sed -i '' 's|guard :rspec, cmd: "bundle exec rspec" do|guard :rspec, cmd: "bin/rspec" do|' Guardfile
})

show(%q{
== Generate Code with Tests ===========================
rails generate controller Greetings hello goodbye
})

show(%q{
== Create A Feature Test ==============================
rails generate rspec:feature homepage_greeting
})

show(%q{
== Run Tests Continuously =============================
guard
})

show(%q{
== Write Tests  =======================================
* Add  any utils to 'app/helpers/greetings_helper.rb'
* Test those utils 'spec/helpers/greetings_helper_spec.rb'
* Test controllers 'spec/controllers/greetings_controller_spec.rb'
* Test models
* Test views 'spec/views/greetings/hello.html.erb_spec.rb'
    it "says hello" do
       render
       expect(rendered).to match /hello/
    end
  Write Feature Specs 'spec/features/homepage_greetings_spec.rb'
    it "Homepage says 'hello'" do
      visit(get_homepage())
      expect(page).to have_content('hello')
})

show(%q{
=======================================================
})
